#!/bin/bash
set -euo pipefail
# X11 resets xmodmap whenever it detects a new keyboard. This script tries to workaround that by
# executing xmodmap & reset caps state when udev detected a new keyboard.

# To enable this script:
# Add an udev rule to file: /etc/udev/rules.d/99-my-xmodmap-on-new-keyboard.rules
## Automatically apply xmodmap after a keyboard has been added.
## See /home/pjm0616/bin/fix-xmodmap for details.
## Be sure to set the correct username for sudo, as the script lives in the user's home directory.
## It's very important that we need to run this script in the background, because it needs be run after X11 has processed the event.
#SUBSYSTEM=="input", ACTION=="add", ENV{ID_INPUT_KEYBOARD}=="?*", RUN+="/usr/bin/sudo -u pjm0616 -- sh -c '/home/pjm0616/bin/fix-xmodmap </dev/null >&0 2>&1 &'"
#SUBSYSTEM=="input", ACTION=="add", ENV{ID_INPUT_KEY}=="?*", RUN+="/usr/bin/sudo -u pjm0616 -- sh -c '/home/pjm0616/bin/fix-xmodmap </dev/null >&0 2>&1 &'"

if [[ ! -e "$HOME/.Xmodmap" ]]; then
	exit 0
fi

curruid=$(id -u)
check_already_running() {
	pgrep -x -u "$curruid" fix-xmodmap | grep -v -- "^$$\$" >/dev/null
}
if check_already_running; then
	exit 0
fi

capsoff() {
	python3 -c 'import sys; from ctypes import *; X11 = cdll.LoadLibrary("libX11.so.6"); display = X11.XOpenDisplay(None); ret = X11.XkbLockModifiers(display, c_uint(0x0100), c_uint(2), c_uint(0)); X11.XCloseDisplay(display); sys.exit(not ret)'
}
iscapson() {
	[[ "$(xset q | grep 'Caps Lock:' | head -n1 | sed -E 's/.*Caps Lock:\s*(on|off).*/\1/')" = on ]]
}
fixkbd() {
	test -n "$DISPLAY"
	test -n "$XAUTHORITY"
	test -n "$DBUS_SESSION_BUS_ADDRESS"

	xmodmap "$HOME/.Xmodmap"
	sleep 1
	xmodmap "$HOME/.Xmodmap"
	iscapson && capsoff
	notify-send -u low -t 2000 -- 'Applying xmodmap (from udev)'
}

XAUTHORITY=${XAUTHORITY:-"/run/user/${curruid}/gdm/Xauthority"}
DBUS_SESSION_BUS_ADDRESS=${DBUS_SESSION_BUS_ADDRESS:-"unix:path=/run/user/${curruid}/bus"}
export XAUTHORITY
export DBUS_SESSION_BUS_ADDRESS

if [[ "${DISPLAY:-}" = '' ]]; then
	while IFS= read -r -d '' fn; do
		DISPLAY=":${fn##*X}"
		export DISPLAY
		fixkbd &
	done < <(find /tmp/.X11-unix/ -type s -uid "$curruid" -print0)
	wait
else
	export DISPLAY
	fixkbd
fi
